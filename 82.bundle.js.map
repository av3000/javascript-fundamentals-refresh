{"version":3,"file":"82.bundle.js","mappings":"sIAAA,IA2FaA,EAAU,SAACC,GACtB,IAAMC,EAAWC,SAASC,eAAe,iBAEnCC,EAAoB,CACxBC,OAAQ,SACRC,UAAW,UACXC,OAAQ,OACRC,QAAS,UACTC,QAAS,WACTC,OAAQ,YACRC,OAAQ,OACRC,QAAS,eAfY,SAACX,GACxBA,EAASY,UAAY,EACvB,CAgBEC,CAAiBb,GAzFG,SAACc,EAAcd,GACnC,IAAMe,EAAed,SAASe,cAAc,OAC5CD,EAAaE,UAAUC,IAAI,kBA6DR,SAACC,GACpB,IAAK,IAAIC,EAAID,EAAcE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACjD,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IAAIM,EACP,CAACP,EAAcG,GAAIH,EAAcC,IAAvED,EAAcC,GAAEM,EAAA,GAAEP,EAAcG,GAAEI,EAAA,EACrC,CACA,OAAOP,CACT,CAjE0BQ,CAAab,GACrBc,SAAQ,SAACC,GACvBd,EAAae,YAAYD,EAC3B,IAEA7B,EAAS8B,YAAYf,EACvB,CAiFEgB,CA3GsB,SAAC5B,GACvB,IAAIW,EAAe,GAEnB,IAAK,IAAMkB,KAAW7B,EAAmB,CACvC,IAAM8B,EAAgBhC,SAASe,cAAc,UAC7CiB,EAAcC,YAAcF,EAE5B,IAAMG,EAAalC,SAASe,cAAc,UAC1CmB,EAAWD,YAAc/B,EAAkB6B,GAE3ClB,EAAasB,KAAKH,EAAeE,EACnC,CAEA,OAAOrB,CACT,CA6FgBuB,CAAgBlC,GAAoBH,GA/ElB,SAChCA,EACAG,EACAJ,GAEA,IAAIuC,EAAsB,KACVtC,EAASuC,iBAAiB,UAElCX,SAAQ,SAACY,GACfA,EAAcC,iBAAiB,SAAS,WACjCH,EAIHA,GA2BoB,SAC1BA,EACAE,EACArC,GAAiB,OAEjBmC,EAAoBJ,cAClB/B,EAAkBqC,EAAcN,cAClC/B,EAAkBmC,EAAoBJ,eACpCM,EAAcN,WAAW,CAlCrBQ,CACEJ,EACAE,EACArC,IAGFmC,EAAoBK,SACpBH,EAAcG,SACdL,EAAsB,KAUN,SAACM,GACvB,GAA8B,IAA1BA,EAAevB,OACJwB,QAAQ,oBAEP/C,IAAYgD,OAAOC,MAAM,IAE3C,CAfQC,CAAgBhD,EAASuC,iBAAiB,aAE1CD,EAAoBrB,UAAU0B,OAAO,YACrCL,EAAsB,OAhBtBA,EAAsBE,EACtBA,EAAcvB,UAAUC,IAAI,YAiBhC,GACF,GACF,CAkDE+B,CAA0BjD,EAAUG,EACtC,C","sources":["webpack://fundamentals/./src/components/country-match/country-match.js"],"sourcesContent":["const generateButtons = (countriesCapitals) => {\n  let buttonsArray = [];\n\n  for (const country in countriesCapitals) {\n    const buttonCountry = document.createElement(\"button\");\n    buttonCountry.textContent = country;\n\n    const buttonCity = document.createElement(\"button\");\n    buttonCity.textContent = countriesCapitals[country];\n\n    buttonsArray.push(buttonCountry, buttonCity);\n  }\n\n  return buttonsArray;\n};\n\nconst renderButtons = (buttonsArray, template) => {\n  const buttonsBlock = document.createElement(\"div\");\n  buttonsBlock.classList.add(\"flex-container\");\n\n  const shuffledButtons = shuffleArray(buttonsArray);\n  shuffledButtons.forEach((button) => {\n    buttonsBlock.appendChild(button);\n  });\n\n  template.appendChild(buttonsBlock);\n};\n\nconst initSelectButtonListeners = (\n  template,\n  countriesCapitals,\n  routeHelper\n) => {\n  let firstSelectedButton = null;\n  const buttons = template.querySelectorAll(\"button\");\n\n  buttons.forEach((currentButton) => {\n    currentButton.addEventListener(\"click\", () => {\n      if (!firstSelectedButton) {\n        firstSelectedButton = currentButton;\n        currentButton.classList.add(\"selected\");\n      } else if (\n        firstSelectedButton &&\n        countryMatchCapital(\n          firstSelectedButton,\n          currentButton,\n          countriesCapitals\n        )\n      ) {\n        firstSelectedButton.remove();\n        currentButton.remove();\n        firstSelectedButton = null;\n        checkIfGameover(template.querySelectorAll(\"button\"), routeHelper);\n      } else {\n        firstSelectedButton.classList.remove(\"selected\");\n        firstSelectedButton = null;\n      }\n    });\n  });\n};\n\nconst checkIfGameover = (currentButtons) => {\n  if (currentButtons.length === 0) {\n    const menu = confirm(\"You Won! Repeat?\");\n\n    return menu ? initApp() : window.route(\"/\");\n  }\n};\n\nconst countryMatchCapital = (\n  firstSelectedButton,\n  currentButton,\n  countriesCapitals\n) =>\n  firstSelectedButton.textContent ===\n    countriesCapitals[currentButton.textContent] ||\n  countriesCapitals[firstSelectedButton.textContent] ===\n    currentButton.textContent;\n\nconst shuffleArray = (originalArray) => {\n  for (let i = originalArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [originalArray[i], originalArray[j]] = [originalArray[j], originalArray[i]];\n  }\n  return originalArray;\n};\n\nconst resetViewContent = (template) => {\n  template.innerHTML = \"\";\n};\n\nexport const initApp = (routeHelper) => {\n  const template = document.getElementById(\"country-match\");\n\n  const countriesCapitals = {\n    Poland: \"Warsaw\",\n    Lithuania: \"Vilnius\",\n    Latvia: \"Riga\",\n    Estonia: \"Tallinn\",\n    Finland: \"Helsinki\",\n    Sweden: \"Stockholm\",\n    Norway: \"Oslo\",\n    Denmark: \"Copenhagen\",\n  };\n\n  resetViewContent(template);\n\n  renderButtons(generateButtons(countriesCapitals), template);\n\n  initSelectButtonListeners(template, countriesCapitals, routeHelper);\n};\n"],"names":["initApp","routeHelper","template","document","getElementById","countriesCapitals","Poland","Lithuania","Latvia","Estonia","Finland","Sweden","Norway","Denmark","innerHTML","resetViewContent","buttonsArray","buttonsBlock","createElement","classList","add","originalArray","i","length","j","Math","floor","random","_ref","shuffleArray","forEach","button","appendChild","renderButtons","country","buttonCountry","textContent","buttonCity","push","generateButtons","firstSelectedButton","querySelectorAll","currentButton","addEventListener","countryMatchCapital","remove","currentButtons","confirm","window","route","checkIfGameover","initSelectButtonListeners"],"sourceRoot":""}